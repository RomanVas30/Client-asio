        -:    0:Source:/home/vagrant/labs/lab-08-asio-client/include/client.hpp
        -:    0:Graph:/home/vagrant/labs/lab-08-asio-client/_builds/gcc-7-cxx17-pic-Debug/CMakeFiles/client.dir/sources/client.cpp.gcno
        -:    0:Data:/home/vagrant/labs/lab-08-asio-client/_builds/gcc-7-cxx17-pic-Debug/CMakeFiles/client.dir/sources/client.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Copyright 2018 Roman Vasyutin romanvas3008@gmail.com
        -:    2:
        -:    3:#ifndef INCLUDE_CLIENT_HPP_
        -:    4:#define INCLUDE_CLIENT_HPP_
        -:    5:
        -:    6:#include <boost/aligned_storage.hpp>
        -:    7:#include <boost/asio.hpp>
        -:    8:#include <boost/bind.hpp>
        -:    9:#include <boost/enable_shared_from_this.hpp>
        -:   10:#include <boost/noncopyable.hpp>
        -:   11:#include <boost/shared_ptr.hpp>
        -:   12:#include <boost/smart_ptr/make_shared_object.hpp>
        -:   13:#include <boost/smart_ptr/shared_ptr.hpp>
        -:   14:#include <boost/thread.hpp>
        -:   15:#include <cstdlib>
        -:   16:#include <ctime>
        -:   17:#include <iostream>
        -:   18:#include <string>
        -:   19:
        -:   20:extern boost::asio::io_service service;
        -:   21:extern boost::recursive_mutex mutex;
        -:   22:
        -:   23:struct talk_to_svr {
        -:   24:  explicit talk_to_svr(const std::string& username):
        -:   25:              sock_(service),
        -:   26:              started_(true), username_(username) {}
        -:   27:  void connect(boost::asio::ip::tcp::endpoint ep);
        -:   28:  void loop();
        -:   29:  std::string username() const {
        -:   30:    return username_;
        -:   31:  }
        -:   32:
        -:   33:private:
        -:   34:  boost::asio::ip::tcp::socket sock_;
        -:   35:  enum { max_msg = 1024 };
        -:   36:  char buff_[1024];
        -:   37:  bool started_;
        -:   38:  std::string username_;
    #####:   39:  void write_request() {
    #####:   40:    write("ping\n");
    #####:   41:  }
        -:   42:  void read_answer();
        -:   43:  void process_msg();
        -:   44:  void on_login(const std::string& msg);
        -:   45:  void on_ping(const std::string& msg);
        -:   46:  void on_clients(const std::string& msg);
        -:   47:  void do_ask_clients();
        -:   48:  void write(const std::string& msg);
        -:   49:  size_t read_complete(const boost::system::error_code& err);
        -:   50:};
        -:   51:
        -:   52:#endif // INCLUDE_CLIENT_HPP_
