        -:    0:Source:/root/.hunter/_Base/70287b1/fc9dcb2/dffbc08/Install/include/boost/asio/ip/address.hpp
        -:    0:Graph:/home/vagrant/labs/lab-08-asio-client/_builds/gcc-7-cxx17-pic-Debug/CMakeFiles/client.dir/sources/main.cpp.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1://
        -:    2:// ip/address.hpp
        -:    3:// ~~~~~~~~~~~~~~
        -:    4://
        -:    5:// Copyright (c) 2003-2018 Christopher M. Kohlhoff (chris at kohlhoff dot com)
        -:    6://
        -:    7:// Distributed under the Boost Software License, Version 1.0. (See accompanying
        -:    8:// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
        -:    9://
        -:   10:
        -:   11:#ifndef BOOST_ASIO_IP_ADDRESS_HPP
        -:   12:#define BOOST_ASIO_IP_ADDRESS_HPP
        -:   13:
        -:   14:#if defined(_MSC_VER) && (_MSC_VER >= 1200)
        -:   15:# pragma once
        -:   16:#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)
        -:   17:
        -:   18:#include <boost/asio/detail/config.hpp>
        -:   19:#include <string>
        -:   20:#include <boost/asio/detail/throw_exception.hpp>
        -:   21:#include <boost/asio/detail/string_view.hpp>
        -:   22:#include <boost/asio/detail/type_traits.hpp>
        -:   23:#include <boost/system/error_code.hpp>
        -:   24:#include <boost/asio/ip/address_v4.hpp>
        -:   25:#include <boost/asio/ip/address_v6.hpp>
        -:   26:#include <boost/asio/ip/bad_address_cast.hpp>
        -:   27:
        -:   28:#if !defined(BOOST_ASIO_NO_IOSTREAM)
        -:   29:# include <iosfwd>
        -:   30:#endif // !defined(BOOST_ASIO_NO_IOSTREAM)
        -:   31:
        -:   32:#include <boost/asio/detail/push_options.hpp>
        -:   33:
        -:   34:namespace boost {
        -:   35:namespace asio {
        -:   36:namespace ip {
        -:   37:
        -:   38:/// Implements version-independent IP addresses.
        -:   39:/**
        -:   40: * The boost::asio::ip::address class provides the ability to use either IP
        -:   41: * version 4 or version 6 addresses.
        -:   42: *
        -:   43: * @par Thread Safety
        -:   44: * @e Distinct @e objects: Safe.@n
        -:   45: * @e Shared @e objects: Unsafe.
        -:   46: */
        -:   47:class address
        -:   48:{
        -:   49:public:
        -:   50:  /// Default constructor.
        -:   51:  BOOST_ASIO_DECL address();
        -:   52:
        -:   53:  /// Construct an address from an IPv4 address.
        -:   54:  BOOST_ASIO_DECL address(const boost::asio::ip::address_v4& ipv4_address);
        -:   55:
        -:   56:  /// Construct an address from an IPv6 address.
        -:   57:  BOOST_ASIO_DECL address(const boost::asio::ip::address_v6& ipv6_address);
        -:   58:
        -:   59:  /// Copy constructor.
        -:   60:  BOOST_ASIO_DECL address(const address& other);
        -:   61:
        -:   62:#if defined(BOOST_ASIO_HAS_MOVE)
        -:   63:  /// Move constructor.
        -:   64:  BOOST_ASIO_DECL address(address&& other);
        -:   65:#endif // defined(BOOST_ASIO_HAS_MOVE)
        -:   66:
        -:   67:  /// Assign from another address.
        -:   68:  BOOST_ASIO_DECL address& operator=(const address& other);
        -:   69:
        -:   70:#if defined(BOOST_ASIO_HAS_MOVE)
        -:   71:  /// Move-assign from another address.
        -:   72:  BOOST_ASIO_DECL address& operator=(address&& other);
        -:   73:#endif // defined(BOOST_ASIO_HAS_MOVE)
        -:   74:
        -:   75:  /// Assign from an IPv4 address.
        -:   76:  BOOST_ASIO_DECL address& operator=(
        -:   77:      const boost::asio::ip::address_v4& ipv4_address);
        -:   78:
        -:   79:  /// Assign from an IPv6 address.
        -:   80:  BOOST_ASIO_DECL address& operator=(
        -:   81:      const boost::asio::ip::address_v6& ipv6_address);
        -:   82:
        -:   83:  /// Get whether the address is an IP version 4 address.
    #####:   84:  bool is_v4() const
        -:   85:  {
    #####:   86:    return type_ == ipv4;
        -:   87:  }
        -:   88:
        -:   89:  /// Get whether the address is an IP version 6 address.
        -:   90:  bool is_v6() const
        -:   91:  {
        -:   92:    return type_ == ipv6;
        -:   93:  }
        -:   94:
        -:   95:  /// Get the address as an IP version 4 address.
        -:   96:  BOOST_ASIO_DECL boost::asio::ip::address_v4 to_v4() const;
        -:   97:
        -:   98:  /// Get the address as an IP version 6 address.
        -:   99:  BOOST_ASIO_DECL boost::asio::ip::address_v6 to_v6() const;
        -:  100:
        -:  101:  /// Get the address as a string.
        -:  102:  BOOST_ASIO_DECL std::string to_string() const;
        -:  103:
        -:  104:#if !defined(BOOST_ASIO_NO_DEPRECATED)
        -:  105:  /// (Deprecated: Use other overload.) Get the address as a string.
        -:  106:  BOOST_ASIO_DECL std::string to_string(boost::system::error_code& ec) const;
        -:  107:
        -:  108:  /// (Deprecated: Use make_address().) Create an address from an IPv4 address
        -:  109:  /// string in dotted decimal form, or from an IPv6 address in hexadecimal
        -:  110:  /// notation.
        -:  111:  static address from_string(const char* str);
        -:  112:
        -:  113:  /// (Deprecated: Use make_address().) Create an address from an IPv4 address
        -:  114:  /// string in dotted decimal form, or from an IPv6 address in hexadecimal
        -:  115:  /// notation.
        -:  116:  static address from_string(const char* str, boost::system::error_code& ec);
        -:  117:
        -:  118:  /// (Deprecated: Use make_address().) Create an address from an IPv4 address
        -:  119:  /// string in dotted decimal form, or from an IPv6 address in hexadecimal
        -:  120:  /// notation.
        -:  121:  static address from_string(const std::string& str);
        -:  122:
        -:  123:  /// (Deprecated: Use make_address().) Create an address from an IPv4 address
        -:  124:  /// string in dotted decimal form, or from an IPv6 address in hexadecimal
        -:  125:  /// notation.
        -:  126:  static address from_string(
        -:  127:      const std::string& str, boost::system::error_code& ec);
        -:  128:#endif // !defined(BOOST_ASIO_NO_DEPRECATED)
        -:  129:
        -:  130:  /// Determine whether the address is a loopback address.
        -:  131:  BOOST_ASIO_DECL bool is_loopback() const;
        -:  132:
        -:  133:  /// Determine whether the address is unspecified.
        -:  134:  BOOST_ASIO_DECL bool is_unspecified() const;
        -:  135:
        -:  136:  /// Determine whether the address is a multicast address.
        -:  137:  BOOST_ASIO_DECL bool is_multicast() const;
        -:  138:
        -:  139:  /// Compare two addresses for equality.
        -:  140:  BOOST_ASIO_DECL friend bool operator==(const address& a1, const address& a2);
        -:  141:
        -:  142:  /// Compare two addresses for inequality.
        -:  143:  friend bool operator!=(const address& a1, const address& a2)
        -:  144:  {
        -:  145:    return !(a1 == a2);
        -:  146:  }
        -:  147:
        -:  148:  /// Compare addresses for ordering.
        -:  149:  BOOST_ASIO_DECL friend bool operator<(const address& a1, const address& a2);
        -:  150:
        -:  151:  /// Compare addresses for ordering.
        -:  152:  friend bool operator>(const address& a1, const address& a2)
        -:  153:  {
        -:  154:    return a2 < a1;
        -:  155:  }
        -:  156:
        -:  157:  /// Compare addresses for ordering.
        -:  158:  friend bool operator<=(const address& a1, const address& a2)
        -:  159:  {
        -:  160:    return !(a2 < a1);
        -:  161:  }
        -:  162:
        -:  163:  /// Compare addresses for ordering.
        -:  164:  friend bool operator>=(const address& a1, const address& a2)
        -:  165:  {
        -:  166:    return !(a1 < a2);
        -:  167:  }
        -:  168:
        -:  169:private:
        -:  170:  // The type of the address.
        -:  171:  enum { ipv4, ipv6 } type_;
        -:  172:
        -:  173:  // The underlying IPv4 address.
        -:  174:  boost::asio::ip::address_v4 ipv4_address_;
        -:  175:
        -:  176:  // The underlying IPv6 address.
        -:  177:  boost::asio::ip::address_v6 ipv6_address_;
        -:  178:};
        -:  179:
        -:  180:/// Create an address from an IPv4 address string in dotted decimal form,
        -:  181:/// or from an IPv6 address in hexadecimal notation.
        -:  182:/**
        -:  183: * @relates address
        -:  184: */
        -:  185:BOOST_ASIO_DECL address make_address(const char* str);
        -:  186:
        -:  187:/// Create an address from an IPv4 address string in dotted decimal form,
        -:  188:/// or from an IPv6 address in hexadecimal notation.
        -:  189:/**
        -:  190: * @relates address
        -:  191: */
        -:  192:BOOST_ASIO_DECL address make_address(
        -:  193:    const char* str, boost::system::error_code& ec);
        -:  194:
        -:  195:/// Create an address from an IPv4 address string in dotted decimal form,
        -:  196:/// or from an IPv6 address in hexadecimal notation.
        -:  197:/**
        -:  198: * @relates address
        -:  199: */
        -:  200:BOOST_ASIO_DECL address make_address(const std::string& str);
        -:  201:
        -:  202:/// Create an address from an IPv4 address string in dotted decimal form,
        -:  203:/// or from an IPv6 address in hexadecimal notation.
        -:  204:/**
        -:  205: * @relates address
        -:  206: */
        -:  207:BOOST_ASIO_DECL address make_address(
        -:  208:    const std::string& str, boost::system::error_code& ec);
        -:  209:
        -:  210:#if defined(BOOST_ASIO_HAS_STRING_VIEW) \
        -:  211:  || defined(GENERATING_DOCUMENTATION)
        -:  212:
        -:  213:/// Create an address from an IPv4 address string in dotted decimal form,
        -:  214:/// or from an IPv6 address in hexadecimal notation.
        -:  215:/**
        -:  216: * @relates address
        -:  217: */
        -:  218:BOOST_ASIO_DECL address make_address(string_view str);
        -:  219:
        -:  220:/// Create an address from an IPv4 address string in dotted decimal form,
        -:  221:/// or from an IPv6 address in hexadecimal notation.
        -:  222:/**
        -:  223: * @relates address
        -:  224: */
        -:  225:BOOST_ASIO_DECL address make_address(
        -:  226:    string_view str, boost::system::error_code& ec);
        -:  227:
        -:  228:#endif // defined(BOOST_ASIO_HAS_STRING_VIEW)
        -:  229:       //  || defined(GENERATING_DOCUMENTATION)
        -:  230:
        -:  231:#if !defined(BOOST_ASIO_NO_IOSTREAM)
        -:  232:
        -:  233:/// Output an address as a string.
        -:  234:/**
        -:  235: * Used to output a human-readable string for a specified address.
        -:  236: *
        -:  237: * @param os The output stream to which the string will be written.
        -:  238: *
        -:  239: * @param addr The address to be written.
        -:  240: *
        -:  241: * @return The output stream.
        -:  242: *
        -:  243: * @relates boost::asio::ip::address
        -:  244: */
        -:  245:template <typename Elem, typename Traits>
        -:  246:std::basic_ostream<Elem, Traits>& operator<<(
        -:  247:    std::basic_ostream<Elem, Traits>& os, const address& addr);
        -:  248:
        -:  249:#endif // !defined(BOOST_ASIO_NO_IOSTREAM)
        -:  250:
        -:  251:} // namespace ip
        -:  252:} // namespace asio
        -:  253:} // namespace boost
        -:  254:
        -:  255:#include <boost/asio/detail/pop_options.hpp>
        -:  256:
        -:  257:#include <boost/asio/ip/impl/address.hpp>
        -:  258:#if defined(BOOST_ASIO_HEADER_ONLY)
        -:  259:# include <boost/asio/ip/impl/address.ipp>
        -:  260:#endif // defined(BOOST_ASIO_HEADER_ONLY)
        -:  261:
        -:  262:#endif // BOOST_ASIO_IP_ADDRESS_HPP
